/* 
 * This is an example where we configure te data of the MPU6050
 * and read the gyro data and print it to the serial monitor
 * 
 * Arduino pin    |   MPU6050
 * 5V             |   Vcc
 * GND            |   GND
 * A4             |   SDA
 * A5             |   SCL
 */

//Includes
#include <Wire.h>

//Variables
float elapsedTime, time, timePrev; // Variables for time control
int gyro_error = 0;                // We use this variable to only calculate once the gyro data error
int16_t Gyro_rawX;                 //Here we store the raw data read
float Gyro_angle_x;                //Here we store the angle value obtained with Gyro data
float Gyro_raw_error_x;            //Here we store the initial gyro data error

void setup()
{
    Wire.begin();                 //begin the wire comunication
    Wire.beginTransmission(0x68); //begin, Send the slave adress (in this case 68)
    Wire.write(0x6B);             //make the reset (place a 0 into the 6B register)
    Wire.write(0x00);
    Wire.endTransmission(true); //end the transmission

    Wire.beginTransmission(0x68); //begin, Send the slave adress (in this case 68)
    Wire.write(0x1B);             //We want to write to the GYRO_CONFIG register (1B hex)
    Wire.write(0x10);             //Set the register bits as 00010000 (1000dps full scale)
    Wire.endTransmission(true);   //End the transmission with the gyro

    Serial.begin(9600); //Remember to set this same baud rate to the serial monitor
    time = millis();    //Start counting time in milliseconds

    /*Here we calculate the gyro data error before we start the loop
 * I make the mean of 200 values, that should be enough*/
    if (gyro_error == 0)
    {
        for (int i = 0; i < 200; i++)
        {
            Wire.beginTransmission(0x68); //begin, Send the slave adress (in this case 68)
            Wire.write(0x43);             //First adress of the Gyro data
            Wire.endTransmission(false);
            Wire.requestFrom(0x68, 2, true);

            Gyro_rawX = Wire.read() << 8 | Wire.read(); //Once again we shif and sum
            /*---X---*/
            Gyro_raw_error_x = Gyro_raw_error_x + (Gyro_rawX / 32.8);

            if (i == 199)
            {
                Gyro_raw_error_x = Gyro_raw_error_x / 200;
                gyro_error = 1;
            }
        }
    }
}

void loop()
{
    timePrev = time;                        // the previous time is stored before the actual time read
    time = millis();                        // actual time read
    elapsedTime = (time - timePrev) / 1000; //divide by 1000 in order to obtain seconds

    //////////////////////////////////////Gyro read/////////////////////////////////////

    Wire.beginTransmission(0x68); //begin, Send the slave adress (in this case 68)
    Wire.write(0x43);             //First adress of the Gyro data
    Wire.endTransmission(false);
    Wire.requestFrom(0x68, 2, true); // We ask for just 2 registers

    Gyro_rawX = Wire.read() << 8 | Wire.read(); //Once again we shif and sum

    /*Now in order to obtain the gyro data in degrees/seconds we have to divide first
    the raw value by 32.8 because that's the value that the datasheet gives us for a 1000dps range*/
    /*---X---*/
    Gyro_rawX = (Gyro_rawX / 32.8) - Gyro_raw_error_x;
    /*---Y---*/

    /*Now we integrate the raw value in degrees per seconds in order to obtain the angle
    * If you multiply degrees/seconds by seconds you obtain degrees */
    /*---X---*/
    Gyro_angle_x = Gyro_angle_x + Gyro_rawX * elapsedTime;
    /*---X---*/

    Serial.print("GyroX raw: ");
    Serial.println(Gyro_angle_x);
}